// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// author © KivancOzbilgic
// developer © KivancOzbilgic
// © beskrovnykh
// © PlusGenie LTD

//@version=5
// indicator('AlphaTrend', shorttitle='AT', overlay=true, format=format.price, precision=2, timeframe='')
strategy("Alpha Trend Strategy on Tradingboat",
     overlay = true,
     initial_capital=10000, 
     currency=currency.USD,
     default_qty_type = strategy.percent_of_equity, 
     default_qty_value=100,
     use_bar_magnifier = true,
     commission_type=strategy.commission.cash_per_contract, 
     commission_value=0.005
     ) //Interactive Brokers rate

coeff = input.float(1, 'Multiplier', step=0.1)
AP = input(14, 'Common Period')
ATR = ta.sma(ta.tr, AP)
src = input(close)
showsignalsk = input(title='Show Signals?', defval=true)
novolumedata = input(title='Change calculation (no volume data)?', defval=false)
upT = low - ATR * coeff
downT = high + ATR * coeff
AlphaTrend = 0.0
AlphaTrend := (novolumedata ? ta.rsi(src, AP) >= 50 : ta.mfi(hlc3, AP) >= 50) ? 
              (upT < nz(AlphaTrend[1])   ? nz(AlphaTrend[1]) : upT) :
              (downT > nz(AlphaTrend[1]) ? nz(AlphaTrend[1]) : downT)

color1 = AlphaTrend > AlphaTrend[2] ? #00E60F : AlphaTrend < AlphaTrend[2] ? #80000B : AlphaTrend[1] > AlphaTrend[3] ? #00E60F : #80000B
k1 = plot(AlphaTrend, color=color.new(#0022FC, 0), linewidth=3)
k2 = plot(AlphaTrend[2], color=color.new(#FC0400, 0), linewidth=3)

fill(k1, k2, color=color1)

buySignalk = ta.crossover(AlphaTrend, AlphaTrend[2])
sellSignalk = ta.crossunder(AlphaTrend, AlphaTrend[2])

K1 = ta.barssince(buySignalk)
K2 = ta.barssince(sellSignalk)
O1 = ta.barssince(buySignalk[1])
O2 = ta.barssince(sellSignalk[1])

plotshape(buySignalk and showsignalsk and O1 > K2 ? AlphaTrend[2] * 0.9999 : na, title='BUY', text='BUY', location=location.absolute, style=shape.labelup, size=size.tiny, color=color.new(#0022FC, 0), textcolor=color.new(color.white, 0))

plotshape(sellSignalk and showsignalsk and O2 > K1 ? AlphaTrend[2] * 1.0001 : na, title='SELL', text='SELL', location=location.absolute, style=shape.labeldown, size=size.tiny, color=color.new(color.maroon, 0), textcolor=color.new(color.white, 0))


// alertcondition(buySignalk and O1 > K2, title='Potential BUY Alarm', message='BUY SIGNAL!')
// alertcondition(sellSignalk and O2 > K1, title='Potential SELL Alarm', message='SELL SIGNAL!')

// alertcondition(buySignalk[1] and O1[1] > K2, title='Confirmed BUY Alarm', message='BUY SIGNAL APPROVED!')
// alertcondition(sellSignalk[1] and O2[1] > K1, title='Confirmed SELL Alarm', message='SELL SIGNAL APPROVED!')

// alertcondition(ta.cross(close, AlphaTrend), title='Price Cross Alert', message='Price - AlphaTrend Crossing!')
// alertcondition(ta.crossover(low, AlphaTrend), title='Candle CrossOver Alarm', message='LAST BAR is ABOVE ALPHATREND')
// alertcondition(ta.crossunder(high, AlphaTrend), title='Candle CrossUnder Alarm', message='LAST BAR is BELOW ALPHATREND!')

// alertcondition(ta.cross(close[1], AlphaTrend[1]), title='Price Cross Alert After Bar Close', message='Price - AlphaTrend Crossing!')
// alertcondition(ta.crossover(low[1], AlphaTrend[1]), title='Candle CrossOver Alarm After Bar Close', message='LAST BAR is ABOVE ALPHATREND!')
// alertcondition(ta.crossunder(high[1], AlphaTrend[1]), title='Candle CrossUnder Alarm After Bar Close', message='LAST BAR is BELOW ALPHATREND!')

longEntryCond = buySignalk and O1 > K2 and strategy.position_size == 0
longCloseCond = sellSignalk and O2 and strategy.position_size > 0

// alertBarstate = barstate.islast and barstate.isconfirmed ? true : na

//timeframe = input.timeframe('D', title="Monitoring frequency")
timeframe = timeframe.period

// [Formating JSON  ]{
// @param: value - only for number
_metricToJson(name, value) =>
    "{" + '"name": ' + '"' + str.tostring(name) + '"' + ', "value": ' + str.tostring(value) + "}"

_marketConditionsToJson(timestamp, ticker, tickerid, currency, timeframe, i_webhookKey, i_scriptId, direction, metrics) =>
    messageContent = array.new_string()
    array.push(messageContent, '"timestamp": ' + str.tostring(timestamp))
    array.push(messageContent, '"ticker": ' + '"' + str.tostring(ticker) + '"')
    array.push(messageContent, '"tickerid": ' + '"' + str.tostring(tickerid) + '"')
    array.push(messageContent, '"currency": ' + '"' + str.tostring(currency) + '"')
    array.push(messageContent, '"timeframe": ' + '"' + str.tostring(timeframe) + '"')
    array.push(messageContent, '"key": ' + '"' + str.tostring(i_webhookKey) + '"')
    array.push(messageContent, '"scriptId": ' + '"' + str.tostring(i_scriptId) + '"')
    array.push(messageContent, '"direction": ' + '"' + str.tostring(direction) + '"')
    array.push(messageContent, '"metrics": ' + str.tostring(metrics))
    messageJson = "{" + array.join(messageContent, ', ') + "}"

i_webhookKey = "WebhookReceived:8c43d5"
i_scriptId = "AlphaTrend"
direction = longEntryCond ? "strategy.long" : longCloseCond ? "strategy.short" : "strategy.monitor"
// }

if longEntryCond
    metrics = array.new_string()
    array.push(metrics, _metricToJson("entry.stop", 0))
    array.push(metrics, _metricToJson("entry.limit", 0))
    array.push(metrics, _metricToJson("exit.limit", 0))
    array.push(metrics, _metricToJson("exit.stop", 0))
    array.push(metrics, _metricToJson("price", nz(strategy.opentrades.entry_price(strategy.opentrades - 1))))
    array.push(metrics, _metricToJson("qty", strategy.opentrades.size(strategy.opentrades - 1)))
    array.push(metrics, _metricToJson("prevQty", strategy.opentrades.size(strategy.opentrades - 2)))
    metricsJson = "[" + array.join(metrics,', ') + "]"
    msg = _marketConditionsToJson(timenow, syminfo.ticker, syminfo.tickerid, syminfo.currency, timeframe, i_webhookKey ,i_scriptId, direction, metricsJson)
    alert(msg, alert.freq_once_per_bar)
    strategy.entry("Enter Long #1", strategy.long, alert_message=msg)

//  [ Closing with market order ] {
if longCloseCond
    metrics = array.new_string()
    array.push(metrics, _metricToJson("entry.stop", 0))
    array.push(metrics, _metricToJson("entry.limit", 0))
    array.push(metrics, _metricToJson("exit.limit", 0))
    array.push(metrics, _metricToJson("exit.stop", 0))
    array.push(metrics, _metricToJson("price", nz(strategy.opentrades.entry_price(strategy.opentrades - 1))))
    array.push(metrics, _metricToJson("qty", strategy.opentrades.size(strategy.opentrades - 1)))
    array.push(metrics, _metricToJson("prevQty", strategy.opentrades.size(strategy.opentrades - 2)))
    metricsJson = "[" + array.join(metrics,', ') + "]"
    msg = _marketConditionsToJson(timenow, syminfo.ticker, syminfo.tickerid, syminfo.currency, timeframe, i_webhookKey ,i_scriptId, direction, metricsJson)
    alert(msg, alert.freq_once_per_bar)
    strategy.close(id="Enter Long #1", alert_message = msg)
// }

//  [Testing Alert ] {
if  barstate.isconfirmed and barstate.islastconfirmedhistory
    metrics = array.new_string()
    array.push(metrics, _metricToJson("entry.stop", 0))
    array.push(metrics, _metricToJson("entry.limit", 0))
    array.push(metrics, _metricToJson("exit.limit", 0))
    array.push(metrics, _metricToJson("exit.stop", 0))
    array.push(metrics, _metricToJson("price", nz(strategy.opentrades.entry_price(strategy.opentrades - 1))))
    array.push(metrics, _metricToJson("qty", strategy.opentrades.size(strategy.opentrades - 1)))
    array.push(metrics, _metricToJson("prevQty", strategy.opentrades.size(strategy.opentrades - 2)))
    metricsJson = "[" + array.join(metrics,', ') + "]"
    msg = _marketConditionsToJson(timenow, syminfo.ticker, syminfo.tickerid, syminfo.currency, timeframe, i_webhookKey ,i_scriptId, direction, metricsJson)
    alert(msg, alert.freq_once_per_bar)
// }